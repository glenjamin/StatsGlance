version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk@sha256:b5d7241de4b030d611d534eb3d2a31129a1e2a86b3b75729f117f7a27890607a
    environment:
      KEY: /home/circleci/developer_key.der
    steps:

      - run:
          name: Install apt dependencies
          working_directory: /home/circleci
          command: |
            sudo apt update
            sudo apt install libusb-1.0 libwebkitgtk-1.0

            # libpng12 and libjpeg8 are annoyingly not available on this debian :(
            # but we can get them from a compatible older .deb files
            wget http://ftp.debian.org/debian/pool/main/libj/libjpeg8/libjpeg8_8d-1+deb7u1_amd64.deb
            sudo apt install ./libjpeg8_8d-1+deb7u1_amd64.deb

            wget http://ftp.debian.org/debian/pool/main/libp/libpng/libpng12-0_1.2.50-2+deb8u3_amd64.deb
            # This deb only installs if we exclude the individual /usr/lib symlink
            echo 'path-exclude /usr/lib/*' | sudo tee /etc/dpkg/dpkg.cfg.d/01_nousrlib
            sudo apt install ./libpng12-0_1.2.50-2+deb8u3_amd64.deb
            sudo rm /etc/dpkg/dpkg.cfg.d/01_nousrlib

      - restore_cache:
          # Cache the ConnectIQ SDK to avoid downloading 200MB from Garmin on every build
          key: connectiq-sdk-3.0.5

      - run:
          name: Install ConnectIQ SDK
          working_directory: /home/circleci
          command: |
            if [ ! -d "/home/circleci/connectiq" ]; then
              wget https://developer.garmin.com/downloads/connect-iq/sdks/connectiq-sdk-lin-3.0.5-2018-11-20-1690028.zip
              unzip connectiq-sdk-lin-*.zip -d /home/circleci/connectiq
            fi
            echo 'export PATH=/home/circleci/connectiq/bin:$PATH' >> $BASH_ENV

      - save_cache:
          paths: /home/circleci/connectiq
          key: connectiq-sdk-3.0.5

      - checkout

      - run:
          name: Generate Ephemeral Developer Key
          working_directory: /home/circleci
          command: |
            openssl genrsa -out developer_key.pem 4096
            openssl pkcs8 -topk8 -inform PEM -outform DER -in developer_key.pem -out $KEY -nocrypt

      - run:
          name: Run Tests
          command: |
            # Run virtual framebuffer and simulator in the background
            export DISPLAY=:99
            Xvfb $DISPLAY &
            connectiq &

            make test
            RETVAL=$?

            # Cleanup background jobs
            kill %2
            kill %1

            exit $RETVAL

      - run:
          name: Create Release Build
          command: make release

      - store_artifacts:
          path: /home/circleci/project/bin
